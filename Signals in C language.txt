Signals in C language


A signal is a software-generated interrupt sent to a process by the OS when the user presses Ctrl-C or another process sends a signal to this process. There is a fixed set of signals that can be sent to a process. Signals are identified by integers.

Signal numbers have symbolic names. For example, SIGCHLD is the number of the signal sent to the parent process when the child terminates.

Examples:


#define SIGHUP  1   /* Hang up the process */ 
#define SIGINT  2   /* Interrupt the process */ 
#define SIGQUIT 3   /* Quit the process */ 
#define SIGILL  4   /* Illegal instruction. */ 
#define SIGTRAP 5   /* Trace trap. */ 
#define SIGABRT 6   /* Abort. */



OS Structures for Signals

For each process, the operating system maintains two integers with bits corresponding to signal numbers.

The two integers keep track of pending signals and blocked signals.

With 32-bit integers, up to 32 different signals can be represented.
Example

In the example below, the SIGINT (= 2) signal is blocked, and no signals are pending.


A signal is sent to a process by setting the corresponding bit in the pending signals integer for the process. Each time the OS selects a process to be run on a processor, the pending and blocked integers are checked. If no signals are pending, the process is restarted normally and continues executing at its next instruction. If one or more signals are pending but each one is blocked, the process is also restarted normally, but the signals are still marked as pending. If one or more signals are pending and NOT blocked, the OS executes the routines in the process’s code to handle the signals.



Default Signal Handlers

There are several default signal handler routines. Each signal is associated with one of these default handler routines. The different default handler routines typically have one of the following actions:

Ign: Ignore the signal; i.e., do nothing, just return

Term: Terminate the process

Cont: Unblock a stopped process

Stop: Block the process



// C program to illustrate 
// default Signal Handler 
#include <stdio.h> 
#include <signal.h> 
  
int main() 
{ 
    signal(SIGINT, handle_sigint); 
    while (1) 
    { 
        printf("hello world\n"); 
        sleep(1); 
    } 
    return 0; 
}


Output

This program prints “hello world” infinitely. When the user presses Ctrl-C, the SIGINT signal is sent, and the default handler terminates the process.

hello world   
hello world         
hello world         
terminated  

User Defined Signal Handlers
A process can replace the default signal handler for almost all signals (except SIGKILL) with its own handler function. A signal handler can have any name, but it must return void and accept a single int parameter, representing the signal number.

Example:

You might name the handler sigchld_handler for handling the SIGCHLD signal, which is sent when a child process terminates. The declaration would look like:

void sigchld_handler(int sig);


When the handler executes, the signal number is passed as a parameter. A programmer can use the same handler for multiple signals, in which case the parameter helps identify which signal was received. If the handler handles only one signal, there’s no need to examine the parameter since it will always be the same signal number.



Example:

You might name the handler sigchld_handler for handling the SIGCHLD signal, which is sent when a child process terminates. The declaration would look like:

void sigchld_handler(int sig);


When the handler executes, the signal number is passed as a parameter. A programmer can use the same handler for multiple signals, in which case the parameter helps identify which signal was received. If the handler handles only one signal, there’s no need to examine the parameter since it will always be the same signal number.


// C program to illustrate 
// User-defined Signal Handler 
#include <stdio.h> 
#include <signal.h> 
  
// Handler for SIGINT, triggered by 
// Ctrl-C at the keyboard 
void handle_sigint(int sig)  { 
    printf("Caught signal %d\n", sig); 
} 
  
int main()  { 
    signal(SIGINT, handle_sigint); 
    while (1); 
    return 0; 
}


Output

^CCaught signal 2  // when user presses ctrl-c
^CCaught signal 2 
Sending signals via kill()
Signals can also be sent using the kill() function.

int kill(pid_t pid, int signal);


where,

pid: ID of the destination process
signal: The type of signal to send
Return value: 0 if the signal was successfully sent

Example:


pid_t iPid = getpid(); /* Process gets its ID. */
kill(iPid, SIGINT);  /* Process sends itself a SIGINT signal   
(commits suicide?) because the default handler for SIGINT terminates the process) */




