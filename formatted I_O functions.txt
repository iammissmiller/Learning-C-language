Formatted and Unformatted Input/Output functions in C with Examples


Formatted I/O Functions

Formatted I/O functions are used to take various inputs from the user and display multiple outputs to the user. These types of I/O functions can help to display the output to the user in different formats using the format specifiers. These I/O supports all data types like int, float, char, and many more.


Why they are called formatted I/O?  


These functions are called formatted I/O functions because we can use format specifiers in these functions and hence, we can format these functions according to our needs.

The following formatted I/O functions will be discussed in this section


printf()

scanf()

sprintf()

sscanf()


# sprintf():

sprintf stands for “string print”. This function is similar to printf() function but this function prints the string into a character array instead of printing it on the console screen.

Syntax:

sprintf(array_name, “format specifier”, variable_name);

Example:

// C program to implement 
// the sprintf() function 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	char str[50]; 
	int a = 2, b = 8; 

	// The string "2 and 8 are even number" 
	// is now stored into str 
	sprintf(str, "%d and %d are even number", 
			a, b); 

	// Displays the string 
	printf("%s", str); 
	return 0; 
}









# sscanf():

sscanf stands for “string scanf”. This function is similar to scanf() function but this function reads data from the string or character array instead of the console screen.


Syntax:

sscanf(array_name, “format specifier”, &variable_name);


Example: 


// C program to implement 
// sscanf() function 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	char str[50]; 
	int a = 2, b = 8, c, d; 

	// The string "a = 2 and b = 8" 
	// is now stored into str 
	// character array 
	sprintf(str, "a = %d and b = %d", 
			a, b); 

	// The value of a and b is now in 
	// c and d 
	sscanf(str, "a = %d and b = %d", 
		&c, &d); 

	// Displays the value of c and d 
	printf("c = %d and d = %d", c, d); 
	return 0; 
}







































































































































