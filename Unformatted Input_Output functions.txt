Unformatted Input/Output functions

Unformatted I/O functions are used only for character data type or character array/string and cannot be used for any other datatype. These functions are used to read single input from the user at the console and it allows to display the value at the console.


Why they are called unformatted I/O?  

These functions are called unformatted I/O functions because we cannot use format specifiers in these functions and hence, cannot format these functions according to our needs.

The following unformatted I/O functions will be discussed in this section-

getch()

getche()

getchar()

putchar()

gets()

puts()

putch()


# getch():

getch() function reads a single character from the keyboard by the user but doesn’t display that character on the console screen and immediately returned without pressing enter key. This function is declared in conio.h(header file). getch() is also used for hold the screen.

Syntax:  

getch(); 

or 

variable-name = getch();

Example:

// C program to implement 
// getch() function 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	printf("Enter any character: "); 

	// Reads a character but 
	// not displays 
	getch(); 

	return 0; 
}




# getche():

getche() function reads a single character from the keyboard by the user and displays it on the console screen and immediately returns without pressing the enter key. This function is declared in conio.h(header file).

Syntax:

getche(); 

or 

variable_name = getche();


Example:



// C program to implement 
// the getche() function 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	printf("Enter any character: "); 

	// Reads a character and 
	// displays immediately 
	getche(); 
	return 0; 
}



The problem with the code is that the getche() function is part of the conio.h header file, which is specific to MS-DOS compilers like Turbo C. This function is not available in standard C libraries used by modern compilers such as GCC, Clang, or Visual Studio.


# getchar(): 


The getchar() function is used to read only a first single character from the keyboard whether multiple characters is typed by the user and this function reads one character at one time until and unless the enter key is pressed. This function is declared in stdio.h(header file)

Syntax: 


Variable-name = getchar();

Example:

// C program to implement 
// the getchar() function 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	// Declaring a char type variable 
	char ch; 

	printf("Enter the character: "); 

	// Taking a character from keyboard 
	ch = getchar(); 

	// Displays the value of ch 
	printf("%c", ch); 
	return 0; 
}



# putchar():


the putchar() function is used to display a single character at a tiome by passing that character diretly to it or by passing a variable that has already stored a character . the funtion is declared in <stdio.h> (header file) .


Syntax: 

putchar(variable_name);  


Example:


// C program to implement 
// the putchar() function 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	char ch; 
	printf("Enter any character: "); 

	// Reads a character 
	ch = getchar(); 

	// Displays that character 
	putchar(ch); 
	return 0; 
}




# gets():



gets() function reads a group of characters or strings from the keyboard by the user and these characters get stored in a character array. This function allows us to write space-separated texts or strings. This function is declared in stdio.h(header file).


Syntax:

char str[length of string in number]; //Declare a char type variable of any length 

gets(str); 


Example:


// C program to implement 
// the gets() function 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	// Declaring a char type array 
	// of length 50 characters 
	char name[50]; 

	printf("Please enter some texts: "); 

	// Reading a line of character or 
	// a string 
	gets(name); 

	// Displaying this line of character 
	// or a string 
	printf("You have entered: %s", 
		name); 
	return 0; 
}


# puts():


In C programming puts() function is used to display a group of characters or strings which is already stored in a character array. This function is declared in stdio.h(header file).


Syntax:  

puts(identifier_name );


Example:

// C program to implement 
// the puts() function 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	char name[50]; 
	printf("Enter your text: "); 

	// Reads string from user 
	gets(name); 

	printf("Your text is: "); 

	// Displays string 
	puts(name); 

	return 0; 
}



# putch():


putch() function is used to display a single character which is given by the user and that character prints at the current cursor location. This function is declared in conio.h(header file)


Syntax:     

putch(variable_name);  


Example:


// C program to implement 
// the putch() functions 
#include <conio.h> 
#include <stdio.h> 

// Driver code 
int main() 
{ 
	char ch; 
	printf("Enter any character:\n "); 

	// Reads a character from the keyboard 
	ch = getch(); 

	printf("\nEntered character is: "); 

	// Displays that character on the console 
	putch(ch); 
	return 0; 
}




Your code will not compile correctly because the conio.h header file is not part of the standard C library. This file is specific to older MS-DOS compilers like Turbo C, and is not available in most modern compilers (e.g., GCC, Clang).

To fix the code for modern C compilers, you should:

Remove the #include <conio.h> line.
Replace putch(ch); with putchar(ch);.














































































