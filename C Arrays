C Arrays

Array in C is one of the most used data structures in C programming. It is a simple and 
fast way of storing multiple values under a single name. In this article, we will study 
the different aspects of array in C language such as array declaration, definition, 
initialization, types of arrays, array syntax, advantages and disadvantages, and many more.

What is Array in C?
An array in C is a fixed-size collection of similar data items stored in contiguous memory 
locations. It can be used to store the collection of primitive data types such as int, char, 
float, etc., and also derived and user-defined data types such as pointers, structures, etc.

C Array Declaration
In C, we have to declare the array like any other variable before using it. We can declare an 
array by specifying its name, the type of its elements, and the size of its dimensions. When 
we declare an array in C, the compiler allocates the memory block of the specified size to the 
array name.

Syntax of Array Declaration
data_type array_name [size];
         or
data_type array_name [size1] [size2]...[sizeN];
where N is the number of dimensions.

The C arrays are static in nature, i.e., they are allocated memory at the compile time.

#include <stdio.h>

int main()
{
    int arr_int[5];
    
    char arr_char[5];
    
    return 0;
}

C Array Initialization
Initialization in C is the process to assign some initial value to the variable. 
When the array is declared or allocated memory, the elements of the array contain some 
garbage value. So, we need to initialize the array to some meaningful value. There are 
multiple ways in which we can initialize an array in C.

1. Array Initialization with Declaration
In this method, we initialize the array along with its declaration. We use an initializer 
list to initialize multiple elements of the array. An initializer list is the list of 
values enclosed within braces { } separated b a comma.

data_type array_name [size] = {value1, value2, ... valueN};

2. Array Initialization with Declaration without Size
If we initialize an array using an initializer list, we can skip declaring the size of the array as the compiler can automatically deduce the size of the array in these cases. The size of the array in these cases is equal to the number of elements present in the initializer list as the compiler can automatically deduce the size of the array.

data_type array_name[] = {1,2,3,4,5};
The size of the above arrays is 5 which is automatically deduced by the compiler.

3. Array Initialization after Declaration (Using Loops)
We initialize the array after the declaration by assigning the initial value to each element individually. We can use for loop, while loop, or do-while loop to assign the value to each element of the array.

for (int i = 0; i < N; i++) {
    array_name[i] = valuei;
}

#include <stdio.h>

int main()
{
    //array initiaisation using initialier list 
    int arr[5] = { 10 , 20 , 30 , 40 ,50 };
    
    //array initialization using initializer list without specifying size 
    int arr1[] = {1 , 2 , 3 , 4 , 5 , 6 ,7};
    
    //array initialization using for loop 
    float arr2[5];
    for (int i = 0; i <9; i++) {
        arr2[i] = (float)i * 2.1;
    }
    return 0;
}

