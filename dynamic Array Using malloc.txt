1. Dynamic Array Using malloc() Function

The “malloc” or “memory allocation” method in C is used to dynamically allocate a single large block of memory with the specified size. It returns a pointer of type void which can be cast into a pointer of any form. It is defined inside <stdlib.h> header file.

Syntax:

ptr = (cast-type*) malloc(byte-size);
We can use this function to create a dynamic array of any type by simply allocating a memory block of some size and then typecasting the returned void pointer to the pointer of the required type. 

Example:

ptr = (int*) malloc(100 * sizeof(int));
In the above example, we have created a dynamic array of type int and size 100 elements.


Note: It is to be noted that if malloc fails to allocate the required memory, it returns the NULL pointer. So, it is a good practice to check for NULL pointer to see if the memory is successfully allocated or not.


Example:

// C program to create dynamic array using malloc() function 

#include <stdio.h> 
#include <stdlib.h> 

int main() 
{ 

	// address of the block created hold by this pointer 
	int* ptr; 
	int size; 

	// Size of the array 
	printf("Enter size of elements:"); 
	scanf("%d", &size); 

	// Memory allocates dynamically using malloc() 
	ptr = (int*)malloc(size * sizeof(int)); 

	// Checking for memory allocation 
	if (ptr == NULL) { 
		printf("Memory not allocated.\n"); 
	} 
	else { 

		// Memory allocated 
		printf("Memory successfully allocated using "
			"malloc.\n"); 

		// Get the elements of the array 
		for (int j = 0; j < size; ++j) { 
			ptr[j] = j + 1; 
		} 

		// Print the elements of the array 
		printf("The elements of the array are: "); 
		for (int k = 0; k < size; ++k) { 
			printf("%d, ", ptr[k]); 
		} 
	} 

	return 0; 
}



Output:

Enter size of elements:5
Memory successfully allocated using malloc.
The elements of the array are: 1, 2, 3, 4, 5,


























