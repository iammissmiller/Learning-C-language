2. Dynamic Array Using calloc() Function

The “calloc” or “contiguous allocation” method in C is used to dynamically allocate the specified number of blocks of memory of the specified type and initialized each block with a default value of 0.

The process of creating a dynamic array using calloc() is similar to the malloc() method. The difference is that calloc() takes arguments instead of one as compared to malloc(). Here, we provide the size of each element and the number of elements required in the dynamic array. Also, each element in the array is initialized to zero.

Syntax:

ptr = (cast-type*)calloc(n, element-size);
Example:

ptr = (int*) calloc(5, sizeof(float));
In the above example, we have created a dynamic array of type float having five elements.

Let’s take another example to create a dynamic array using the calloc() method.

Example:


// C program to create dynamic array using calloc() function 

#include <stdio.h> 
#include <stdlib.h> 

int main() 
{ 

	// address of the block created hold by this pointer 
	int* ptr; 
	int size; 

	// Size of the array 
	printf("Enter size of elements:"); 
	scanf("%d", &size); 

	// Memory allocates dynamically using calloc() 
	ptr = (int*)calloc(size, sizeof(int)); 

	// Checking for memory allocation 
	if (ptr == NULL) { 
		printf("Memory not allocated.\n"); 
	} 
	else { 

		// Memory allocated 
		printf("Memory successfully allocated using "
			"malloc.\n"); 

		// Get the elements of the array 
		for (int j = 0; j < size; ++j) { 
			ptr[j] = j + 1; 
		} 

		// Print the elements of the array 
		printf("The elements of the array are: "); 
		for (int k = 0; k < size; ++k) { 
			printf("%d, ", ptr[k]); 
		} 
	} 

	return 0; 
}


Output:

Enter size of elements:6
Memory successfully allocated using malloc.
The elements of the array are: 1, 2, 3, 4, 5, 6, 





























