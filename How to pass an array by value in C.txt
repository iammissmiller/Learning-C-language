How to pass an array by value in C ?

In C, array name represents address and when we pass an array, we actually pass address and the parameter receiving function always accepts them as pointers (even if we use [], refer this for details).

How to pass array by value, i.e., how to make sure that we have a new copy of array when we pass it to function?
This can be done by wrapping the array in a structure and creating a variable of type of that structure and assigning values to that array. After that, passing the variable to some other function and modifying it as per requirements. Note that array members are copied when passed as parameter, but dynamic arrays are not. So this solution works only for non-dynamic arrays (created without new or malloc).

#include <stdio.h>

#include <stdlib.h>

#define size 5

struct arraywrapper
{

int arr[size];

};

void modify(struct arraywrapper temp)
{

int *ptr = temp.arr;
int i;

printf("in 'modify()' , before modification\n");

for (i = 0; i < size; ++i)
printf("%d " , ptr[i]);

printf("\n");

for (i = 0; i < size ; ++i)
ptr[i] = 100;

printf("\nin 'modify()' , after modification\n");

for (i = 0; i < size; ++i)
printf("%d " , ptr[i]);


}

int main()
{

int i;

struct arraywrapper obj;
for (i = 0; i < size; i++)
obj.arr[i] = 10;

modify(obj);

printf("\n\nin 'main' , after calling modify()\n");


for (i = 0; i < size ; ++i)
printf("%d " , obj.arr[i]);

printf("\n");

return 0;


}







